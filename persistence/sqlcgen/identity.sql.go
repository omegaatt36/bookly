// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: identity.sql

package sqlcgen

import (
	"context"
)

const deleteIdentity = `-- name: DeleteIdentity :exec
DELETE FROM identities
WHERE provider = $1 AND identifier = $2
`

type DeleteIdentityParams struct {
	Provider   string
	Identifier string
}

func (q *Queries) DeleteIdentity(ctx context.Context, arg DeleteIdentityParams) error {
	_, err := q.db.Exec(ctx, deleteIdentity, arg.Provider, arg.Identifier)
	return err
}

const getIdentitiesByUserID = `-- name: GetIdentitiesByUserID :many
SELECT id, user_id, provider, identifier, credential, last_used_at FROM identities
WHERE user_id = $1
`

func (q *Queries) GetIdentitiesByUserID(ctx context.Context, userID string) ([]Identity, error) {
	rows, err := q.db.Query(ctx, getIdentitiesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Identity{}
	for rows.Next() {
		var i Identity
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Provider,
			&i.Identifier,
			&i.Credential,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIdentityByProviderAndIdentifier = `-- name: GetIdentityByProviderAndIdentifier :one
SELECT id, user_id, provider, identifier, credential, last_used_at FROM identities
WHERE provider = $1 AND identifier = $2
LIMIT 1
`

type GetIdentityByProviderAndIdentifierParams struct {
	Provider   string
	Identifier string
}

func (q *Queries) GetIdentityByProviderAndIdentifier(ctx context.Context, arg GetIdentityByProviderAndIdentifierParams) (Identity, error) {
	row := q.db.QueryRow(ctx, getIdentityByProviderAndIdentifier, arg.Provider, arg.Identifier)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.Identifier,
		&i.Credential,
		&i.LastUsedAt,
	)
	return i, err
}

const updateIdentityCredential = `-- name: UpdateIdentityCredential :exec
UPDATE identities
SET 
    credential = $3,
    last_used_at = NOW()
WHERE provider = $1 AND identifier = $2
`

type UpdateIdentityCredentialParams struct {
	Provider   string
	Identifier string
	Credential string
}

func (q *Queries) UpdateIdentityCredential(ctx context.Context, arg UpdateIdentityCredentialParams) error {
	_, err := q.db.Exec(ctx, updateIdentityCredential, arg.Provider, arg.Identifier, arg.Credential)
	return err
}

const updateIdentityLastUsed = `-- name: UpdateIdentityLastUsed :exec
UPDATE identities
SET 
    last_used_at = NOW()
WHERE provider = $1 AND identifier = $2
`

type UpdateIdentityLastUsedParams struct {
	Provider   string
	Identifier string
}

func (q *Queries) UpdateIdentityLastUsed(ctx context.Context, arg UpdateIdentityLastUsedParams) error {
	_, err := q.db.Exec(ctx, updateIdentityLastUsed, arg.Provider, arg.Identifier)
	return err
}
