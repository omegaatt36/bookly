// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

type Querier interface {
	AddIdentity(ctx context.Context, arg AddIdentityParams) error
	CreateAccount(ctx context.Context, arg CreateAccountParams) error
	CreateLedger(ctx context.Context, arg CreateLedgerParams) (string, error)
	CreateRecurringTransaction(ctx context.Context, arg CreateRecurringTransactionParams) (RecurringTransaction, error)
	CreateReminder(ctx context.Context, arg CreateReminderParams) (Reminder, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (string, error)
	DeactivateAccountByID(ctx context.Context, arg DeactivateAccountByIDParams) error
	DeactivateUserByID(ctx context.Context, id string) error
	DeleteAccount(ctx context.Context, id string) error
	DeleteIdentity(ctx context.Context, arg DeleteIdentityParams) error
	DeleteLedger(ctx context.Context, id string) error
	DeleteRecurringTransaction(ctx context.Context, id string) error
	DeleteReminder(ctx context.Context, id string) error
	DeleteUser(ctx context.Context, id string) error
	GetAccountByID(ctx context.Context, id string) (Account, error)
	GetAccountsByUserID(ctx context.Context, userID string) ([]Account, error)
	GetActiveRecurringTransactionsDue(ctx context.Context, nextDue pgtype.Timestamptz) ([]RecurringTransaction, error)
	GetActiveRemindersByUserID(ctx context.Context, arg GetActiveRemindersByUserIDParams) ([]Reminder, error)
	GetAllAccounts(ctx context.Context) ([]Account, error)
	GetAllUsers(ctx context.Context) ([]User, error)
	GetIdentitiesByUserID(ctx context.Context, userID string) ([]Identity, error)
	GetIdentityByProviderAndIdentifier(ctx context.Context, arg GetIdentityByProviderAndIdentifierParams) (Identity, error)
	GetLedgerAmount(ctx context.Context, id string) (decimal.Decimal, error)
	GetLedgerByID(ctx context.Context, id string) (GetLedgerByIDRow, error)
	GetLedgersByAccountID(ctx context.Context, accountID string) ([]GetLedgersByAccountIDRow, error)
	GetRecurringTransactionByID(ctx context.Context, id string) (RecurringTransaction, error)
	GetRecurringTransactionsByUserID(ctx context.Context, userID string) ([]RecurringTransaction, error)
	GetReminderByID(ctx context.Context, id string) (Reminder, error)
	GetRemindersByRecurringTransactionID(ctx context.Context, recurringTransactionID string) ([]Reminder, error)
	GetUpcomingReminders(ctx context.Context, arg GetUpcomingRemindersParams) ([]GetUpcomingRemindersRow, error)
	GetUserByID(ctx context.Context, id string) (User, error)
	GetUserByIdentity(ctx context.Context, arg GetUserByIdentityParams) (GetUserByIdentityRow, error)
	IncreaseAccountBalance(ctx context.Context, arg IncreaseAccountBalanceParams) error
	MarkReminderAsRead(ctx context.Context, id string) (Reminder, error)
	UpdateAccount(ctx context.Context, arg UpdateAccountParams) error
	UpdateIdentityCredential(ctx context.Context, arg UpdateIdentityCredentialParams) error
	UpdateIdentityLastUsed(ctx context.Context, arg UpdateIdentityLastUsedParams) error
	UpdateLedger(ctx context.Context, arg UpdateLedgerParams) error
	UpdateRecurringTransaction(ctx context.Context, arg UpdateRecurringTransactionParams) (RecurringTransaction, error)
	UpdateRecurringTransactionExecution(ctx context.Context, arg UpdateRecurringTransactionExecutionParams) (RecurringTransaction, error)
	UpdateUser(ctx context.Context, arg UpdateUserParams) error
	VoidLedger(ctx context.Context, id string) error
}

var _ Querier = (*Queries)(nil)
