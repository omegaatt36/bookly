// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: budget.sql

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (
    user_id,
    name,
    period,
    start_date,
    end_date,
    amount,
    category_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, created_at, updated_at, deleted_at, user_id, name, period, start_date, end_date, amount, category_id
`

type CreateBudgetParams struct {
	UserID     int32
	Name       string
	Period     string
	StartDate  pgtype.Timestamptz
	EndDate    pgtype.Timestamptz
	Amount     decimal.Decimal
	CategoryID int32
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.db.QueryRow(ctx, createBudget,
		arg.UserID,
		arg.Name,
		arg.Period,
		arg.StartDate,
		arg.EndDate,
		arg.Amount,
		arg.CategoryID,
	)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.Name,
		&i.Period,
		&i.StartDate,
		&i.EndDate,
		&i.Amount,
		&i.CategoryID,
	)
	return i, err
}

const deleteBudget = `-- name: DeleteBudget :exec
UPDATE budgets
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteBudget(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBudget, id)
	return err
}

const getBudgetByID = `-- name: GetBudgetByID :one
SELECT id, created_at, updated_at, deleted_at, user_id, name, period, start_date, end_date, amount, category_id FROM budgets
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetBudgetByID(ctx context.Context, id int32) (Budget, error) {
	row := q.db.QueryRow(ctx, getBudgetByID, id)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.Name,
		&i.Period,
		&i.StartDate,
		&i.EndDate,
		&i.Amount,
		&i.CategoryID,
	)
	return i, err
}

const listBudgetsByUserID = `-- name: ListBudgetsByUserID :many
SELECT id, created_at, updated_at, deleted_at, user_id, name, period, start_date, end_date, amount, category_id FROM budgets
WHERE user_id = $1 AND deleted_at IS NULL
ORDER BY start_date DESC
`

func (q *Queries) ListBudgetsByUserID(ctx context.Context, userID int32) ([]Budget, error) {
	rows, err := q.db.Query(ctx, listBudgetsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Budget{}
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
			&i.Name,
			&i.Period,
			&i.StartDate,
			&i.EndDate,
			&i.Amount,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBudget = `-- name: UpdateBudget :one
UPDATE budgets
SET
    name = $2,
    period = $3,
    start_date = $4,
    end_date = $5,
    amount = $6,
    category_id = $7,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, created_at, updated_at, deleted_at, user_id, name, period, start_date, end_date, amount, category_id
`

type UpdateBudgetParams struct {
	ID         int32
	Name       string
	Period     string
	StartDate  pgtype.Timestamptz
	EndDate    pgtype.Timestamptz
	Amount     decimal.Decimal
	CategoryID int32
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) (Budget, error) {
	row := q.db.QueryRow(ctx, updateBudget,
		arg.ID,
		arg.Name,
		arg.Period,
		arg.StartDate,
		arg.EndDate,
		arg.Amount,
		arg.CategoryID,
	)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.Name,
		&i.Period,
		&i.StartDate,
		&i.EndDate,
		&i.Amount,
		&i.CategoryID,
	)
	return i, err
}
