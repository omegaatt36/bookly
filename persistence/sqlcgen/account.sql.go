// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package sqlcgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (
    user_id,
    name,
    currency,
    status,
    balance
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreateAccountParams struct {
	UserID   string
	Name     string
	Currency string
	Status   string
	Balance  decimal.Decimal
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.Exec(ctx, createAccount,
		arg.UserID,
		arg.Name,
		arg.Currency,
		arg.Status,
		arg.Balance,
	)
	return err
}

const deactivateAccountByID = `-- name: DeactivateAccountByID :exec
UPDATE accounts
SET
    status = $1,
    updated_at = NOW()
WHERE id = $2 AND deleted_at IS NULL
`

type DeactivateAccountByIDParams struct {
	Status string
	ID     string
}

func (q *Queries) DeactivateAccountByID(ctx context.Context, arg DeactivateAccountByIDParams) error {
	_, err := q.db.Exec(ctx, deactivateAccountByID, arg.Status, arg.ID)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE accounts
SET
    deleted_at = NOW(),
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteAccount(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, created_at, updated_at, deleted_at, user_id, name, status, currency, balance FROM accounts
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetAccountByID(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.Name,
		&i.Status,
		&i.Currency,
		&i.Balance,
	)
	return i, err
}

const getAccountsByUserID = `-- name: GetAccountsByUserID :many
SELECT id, created_at, updated_at, deleted_at, user_id, name, status, currency, balance FROM accounts
WHERE user_id = $1 AND deleted_at IS NULL
ORDER BY created_at
`

func (q *Queries) GetAccountsByUserID(ctx context.Context, userID string) ([]Account, error) {
	rows, err := q.db.Query(ctx, getAccountsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
			&i.Name,
			&i.Status,
			&i.Currency,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAccounts = `-- name: GetAllAccounts :many
SELECT id, created_at, updated_at, deleted_at, user_id, name, status, currency, balance FROM accounts
WHERE deleted_at IS NULL
ORDER BY created_at
`

func (q *Queries) GetAllAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, getAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
			&i.Name,
			&i.Status,
			&i.Currency,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increaseAccountBalance = `-- name: IncreaseAccountBalance :exec
UPDATE accounts
SET
    balance = balance + $1,
    updated_at = NOW()
WHERE id = $2 AND deleted_at IS NULL
`

type IncreaseAccountBalanceParams struct {
	Balance decimal.Decimal
	ID      string
}

func (q *Queries) IncreaseAccountBalance(ctx context.Context, arg IncreaseAccountBalanceParams) error {
	_, err := q.db.Exec(ctx, increaseAccountBalance, arg.Balance, arg.ID)
	return err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts
SET
    user_id = CASE WHEN $1::uuid IS NULL THEN user_id ELSE $1 END,
    name = CASE WHEN $2::text IS NULL THEN name ELSE $2 END,
    currency = CASE WHEN $3::text IS NULL THEN currency ELSE $3 END,
    status = CASE WHEN $4::text IS NULL THEN status ELSE $4 END,
    updated_at = NOW()
WHERE id = $5 AND deleted_at IS NULL
`

type UpdateAccountParams struct {
	UserID   pgtype.UUID
	Name     pgtype.Text
	Currency pgtype.Text
	Status   pgtype.Text
	ID       string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, updateAccount,
		arg.UserID,
		arg.Name,
		arg.Currency,
		arg.Status,
		arg.ID,
	)
	return err
}
