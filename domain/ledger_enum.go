// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package domain

import (
	"errors"
	"fmt"
)

const (
	// LedgerTypeBalance is a LedgerType of type balance.
	LedgerTypeBalance LedgerType = "balance"
	// LedgerTypeIncome is a LedgerType of type income.
	LedgerTypeIncome LedgerType = "income"
	// LedgerTypeExpense is a LedgerType of type expense.
	LedgerTypeExpense LedgerType = "expense"
	// LedgerTypeTransfer is a LedgerType of type transfer.
	LedgerTypeTransfer LedgerType = "transfer"
)

var ErrInvalidLedgerType = errors.New("not a valid LedgerType")

// String implements the Stringer interface.
func (x LedgerType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LedgerType) IsValid() bool {
	_, err := ParseLedgerType(string(x))
	return err == nil
}

var _LedgerTypeValue = map[string]LedgerType{
	"balance":  LedgerTypeBalance,
	"income":   LedgerTypeIncome,
	"expense":  LedgerTypeExpense,
	"transfer": LedgerTypeTransfer,
}

// ParseLedgerType attempts to convert a string to a LedgerType.
func ParseLedgerType(name string) (LedgerType, error) {
	if x, ok := _LedgerTypeValue[name]; ok {
		return x, nil
	}
	return LedgerType(""), fmt.Errorf("%s is %w", name, ErrInvalidLedgerType)
}
