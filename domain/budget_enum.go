// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package domain

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// PeriodTypeMonthly is a PeriodType of type Monthly.
	PeriodTypeMonthly PeriodType = "monthly"
	// PeriodTypeYearly is a PeriodType of type Yearly.
	PeriodTypeYearly PeriodType = "yearly"
)

var ErrInvalidPeriodType = fmt.Errorf("not a valid PeriodType, try [%s]", strings.Join(_PeriodTypeNames, ", "))

var _PeriodTypeNames = []string{
	string(PeriodTypeMonthly),
	string(PeriodTypeYearly),
}

// String implements the Stringer interface.
func (x PeriodType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PeriodType) IsValid() bool {
	_, err := ParsePeriodType(string(x))
	return err == nil
}

var _PeriodTypeValue = map[string]PeriodType{
	"monthly": PeriodTypeMonthly,
	"yearly":  PeriodTypeYearly,
}

// ParsePeriodType attempts to convert a string to a PeriodType.
func ParsePeriodType(name string) (PeriodType, error) {
	if x, ok := _PeriodTypeValue[name]; ok {
		return x, nil
	}
	return PeriodType(""), fmt.Errorf("%s is %w", name, ErrInvalidPeriodType)
}

// MustParsePeriodType converts a string to a PeriodType, and panics if is not valid.
func MustParsePeriodType(name string) PeriodType {
	val, err := ParsePeriodType(name)
	if err != nil {
		panic(err)
	}
	return val
}

// Scan implements the Scanner interface.
func (x *PeriodType) Scan(value any) (err error) {
	if value == nil {
		*x = PeriodType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParsePeriodType(v)
	case []byte:
		*x, err = ParsePeriodType(string(v))
	case PeriodType:
		*x = v
	case *PeriodType:
		*x = *v
	case *string:
		if v == nil {
			*x = PeriodType("")
		} else {
			*x, err = ParsePeriodType(*v)
		}
	default:
		return errors.New("invalid type for PeriodType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x PeriodType) Value() (driver.Value, error) {
	return x.String(), nil
}