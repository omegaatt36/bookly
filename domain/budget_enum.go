// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package domain

import (
	"fmt"
	"strings"
)

const (
	// BudgetPeriodMonthly is a BudgetPeriod of type Monthly.
	BudgetPeriodMonthly BudgetPeriod = "monthly"
	// BudgetPeriodYearly is a BudgetPeriod of type Yearly.
	BudgetPeriodYearly BudgetPeriod = "yearly"
)

var ErrInvalidBudgetPeriod = fmt.Errorf("not a valid BudgetPeriod, try [%s]", strings.Join(_BudgetPeriodNames, ", "))

var _BudgetPeriodNames = []string{
	string(BudgetPeriodMonthly),
	string(BudgetPeriodYearly),
}

// BudgetPeriodNames returns a list of possible string values of BudgetPeriod.
func BudgetPeriodNames() []string {
	tmp := make([]string, len(_BudgetPeriodNames))
	copy(tmp, _BudgetPeriodNames)
	return tmp
}

// String implements the Stringer interface.
func (x BudgetPeriod) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x *BudgetPeriod) String() string {
	return string(*x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x BudgetPeriod) IsValid() bool {
	_, err := ParseBudgetPeriod(string(x))
	return err == nil
}

var _BudgetPeriodValue = map[string]BudgetPeriod{
	"monthly": BudgetPeriodMonthly,
	"yearly":  BudgetPeriodYearly,
}

// ParseBudgetPeriod attempts to convert a string to a BudgetPeriod.
func ParseBudgetPeriod(name string) (BudgetPeriod, error) {
	if x, ok := _BudgetPeriodValue[name]; ok {
		return x, nil
	}
	return "", fmt.Errorf("%s is %w", name, ErrInvalidBudgetPeriod)
}

// MarshalText implements the text marshaller method.
func (x BudgetPeriod) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *BudgetPeriod) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseBudgetPeriod(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
