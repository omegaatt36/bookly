// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.1
// Revision: a6f63bddde05aca4221df9c8e9e6d7d9674b1cb4
// Build Date: 2025-03-18T23:42:14Z
// Built By: goreleaser

package domain

import (
	"errors"
	"fmt"
)

const (
	// RecurrenceStatusActive is a RecurrenceStatus of type active.
	RecurrenceStatusActive RecurrenceStatus = "active"
	// RecurrenceStatusPaused is a RecurrenceStatus of type paused.
	RecurrenceStatusPaused RecurrenceStatus = "paused"
	// RecurrenceStatusCompleted is a RecurrenceStatus of type completed.
	RecurrenceStatusCompleted RecurrenceStatus = "completed"
	// RecurrenceStatusCancelled is a RecurrenceStatus of type cancelled.
	RecurrenceStatusCancelled RecurrenceStatus = "cancelled"
)

var ErrInvalidRecurrenceStatus = errors.New("not a valid RecurrenceStatus")

// String implements the Stringer interface.
func (x RecurrenceStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RecurrenceStatus) IsValid() bool {
	_, err := ParseRecurrenceStatus(string(x))
	return err == nil
}

var _RecurrenceStatusValue = map[string]RecurrenceStatus{
	"active":    RecurrenceStatusActive,
	"paused":    RecurrenceStatusPaused,
	"completed": RecurrenceStatusCompleted,
	"cancelled": RecurrenceStatusCancelled,
}

// ParseRecurrenceStatus attempts to convert a string to a RecurrenceStatus.
func ParseRecurrenceStatus(name string) (RecurrenceStatus, error) {
	if x, ok := _RecurrenceStatusValue[name]; ok {
		return x, nil
	}
	return RecurrenceStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidRecurrenceStatus)
}

const (
	// RecurrenceTypeDaily is a RecurrenceType of type daily.
	RecurrenceTypeDaily RecurrenceType = "daily"
	// RecurrenceTypeWeekly is a RecurrenceType of type weekly.
	RecurrenceTypeWeekly RecurrenceType = "weekly"
	// RecurrenceTypeBiweekly is a RecurrenceType of type biweekly.
	RecurrenceTypeBiweekly RecurrenceType = "biweekly"
	// RecurrenceTypeMonthly is a RecurrenceType of type monthly.
	RecurrenceTypeMonthly RecurrenceType = "monthly"
	// RecurrenceTypeQuarterly is a RecurrenceType of type quarterly.
	RecurrenceTypeQuarterly RecurrenceType = "quarterly"
	// RecurrenceTypeYearly is a RecurrenceType of type yearly.
	RecurrenceTypeYearly RecurrenceType = "yearly"
	// RecurrenceTypeCustom is a RecurrenceType of type custom.
	RecurrenceTypeCustom RecurrenceType = "custom"
)

var ErrInvalidRecurrenceType = errors.New("not a valid RecurrenceType")

// String implements the Stringer interface.
func (x RecurrenceType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RecurrenceType) IsValid() bool {
	_, err := ParseRecurrenceType(string(x))
	return err == nil
}

var _RecurrenceTypeValue = map[string]RecurrenceType{
	"daily":     RecurrenceTypeDaily,
	"weekly":    RecurrenceTypeWeekly,
	"biweekly":  RecurrenceTypeBiweekly,
	"monthly":   RecurrenceTypeMonthly,
	"quarterly": RecurrenceTypeQuarterly,
	"yearly":    RecurrenceTypeYearly,
	"custom":    RecurrenceTypeCustom,
}

// ParseRecurrenceType attempts to convert a string to a RecurrenceType.
func ParseRecurrenceType(name string) (RecurrenceType, error) {
	if x, ok := _RecurrenceTypeValue[name]; ok {
		return x, nil
	}
	return RecurrenceType(""), fmt.Errorf("%s is %w", name, ErrInvalidRecurrenceType)
}
